#!/usr/bin/env zsh
# take numeric prefix to command
zle -f vichange
setopt localoptions noksharrays extendedglob
# start|end:        hex/other number start or end
# odec_(start|end): the start or end of the longest matching [[:digit:]] string
# base:             the value determines what type of number is matched
# zero:             this number has leading zeroes to preserve
# d:                the numeric change requested
# (s)ans:           the answer, in numeric or (s)tring format
local sans base
local -i d ans start end odec_start odec_end zero
# We don't detect octal, instead we let zsh (( arithmetic )) gate it:
# If `setopt octalzerores` and an invalid octal number (like 08), the increment will fail

case ${WIDGET} in
	vi-dec*) d=0-${NUMERIC:-'1'} ;;
	*) d=${NUMERIC:-'1'} ;;
esac

# visual mode
if (( REGION_ACTIVE )); then
	zero=0
	if (( MARK > CURSOR )); then
		end=1+MARK start=1+CURSOR
	else
		end=1+CURSOR start=1+MARK
	fi
	case $BUFFER[start,end] in
		-#0[bB]0*) zero=1 ;&
		-#0[bB]* ) base=cbin ;;
		-#0[xX]0*) zero=1 ;&
		-#0[xX]* ) base=chex ;;
		-#0*) zero=1
	esac
else
	local -a reply
	.vi-increment::select-number
	! (($#reply)) && return 1
	base=$reply[1]
	zero=$reply[2]
	start=$reply[3]
	end=$reply[4]
fi
case $base in
cbin) # no cbases-0x[hex]-like option, have to manually strip prefix
	ans=$(( [#2] BUFFER[start,end] + d ))
	sans="${ans#'2#'}"
	(( start += 2 ))
	;;
chex)
	setopt localoptions cbases
	ans=$(( [#16] BUFFER[start,end] + d ))
	;;
*)
	ans=$(( BUFFER[start,end] + d ))
esac
if (( zero )); then
	local -Z $((1 + end - start )) ans
	if [[ -z $base && $options[cbases] = on && $options[octalzeroes] = on ]]; then
		local -i 8 ans
		[[ $ans[1] = 0 ]] || sans=0$ans
	fi
fi
BUFFER="$BUFFER[1,start-1]${sans:=$ans}$BUFFER[end+1,$#BUFFER]"
CURSOR=$(( start - 2 + ${#sans} ))
MARK=$(( start - 1 ))
